// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MetroFire.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Chat document")]
    public partial class ChatDocumentFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ChatDocument.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Chat document", "In order to view and respond to Campfire messages\r\nAs a Campfire chatter\r\nI want " +
                    "to have chat messages rendered and formatted in a pleasing way", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("that I am logged in");
#line 8
 testRunner.And("a user \'Testuser\'");
#line 9
 testRunner.And("a room called \"Test\"");
#line 10
 testRunner.And("that I have joined the room \"Test\"");
#line 11
 testRunner.And("that the current room is \"Test\"");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Display simple text message")]
        public virtual void DisplaySimpleTextMessage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Display simple text message", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 14
 testRunner.When("I add the message \"Hello world\" from user \'Testuser\'");
#line 15
 testRunner.Then("the message should be displayed like \"<Testuser> Hello world\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Emotes")]
        public virtual void Emotes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Emotes", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 18
 testRunner.When("I add the message \"/me is emotional\" from user \'Testuser\'");
#line 19
 testRunner.Then("the message should be displayed like \"Testuser is emotional\"");
#line 20
 testRunner.And("the message should be displayed in italics");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Room joins")]
        public virtual void RoomJoins()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Room joins", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 24
 testRunner.When("user \'Testuser\' joins the room");
#line 25
 testRunner.Then("the message should be displayed like \"Testuser entered the room\"");
#line 26
 testRunner.And("the message should be displayed in italics");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Room leaves")]
        public virtual void RoomLeaves()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Room leaves", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 29
 testRunner.When("user \'Testuser\' leaves the room");
#line 30
 testRunner.Then("the message should be displayed like \"Testuser left the room\"");
#line 31
 testRunner.And("the message should be displayed in italics");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Room kicks")]
        public virtual void RoomKicks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Room kicks", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 34
 testRunner.When("user \'Testuser\' is kicked from the room");
#line 35
 testRunner.Then("the message should be displayed like \"Testuser was kicked from the room\"");
#line 36
 testRunner.And("the message should be displayed in italics");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Hyperlinks")]
        [NUnit.Framework.TestCaseAttribute("http://www.test.com", new string[0])]
        [NUnit.Framework.TestCaseAttribute("http://www.vg.no", new string[0])]
        [NUnit.Framework.TestCaseAttribute("https://www.ikke.no", new string[0])]
        [NUnit.Framework.TestCaseAttribute("http://intranett.local", new string[0])]
        [NUnit.Framework.TestCaseAttribute("http://nb.wikipedia.org/Jordstråler", new string[0])]
        [NUnit.Framework.TestCaseAttribute("http://no.wikipedia.org/wiki/Portal:Forside", new string[0])]
        [NUnit.Framework.TestCaseAttribute("http://en.wikipedia.org/wiki/Decembrist_revolt#cite_note-11", new string[0])]
        public virtual void Hyperlinks(string hyperlink, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Hyperlinks", exampleTags);
#line 38
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 39
 testRunner.When(string.Format("I add the message \"This is a hyperlink: {0} This is text following a hyperlink\" f" +
                        "rom user \'Testuser\'", hyperlink));
#line 40
 testRunner.Then(string.Format("the message should be displayed like \"<Testuser> This is a hyperlink: {0} This is" +
                        " text following a hyperlink\"", hyperlink));
#line 41
 testRunner.And(string.Format("\"{0}\" should be a hyperlink", hyperlink));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Image pastes without memory leaks")]
        public virtual void ImagePastesWithoutMemoryLeaks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Image pastes without memory leaks", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 55
 testRunner.When("I add 40 image pastes to the room");
#line 56
 testRunner.And("I cancel all the image pastes in the room");
#line 57
 testRunner.Then("there should be 0 PasteViewModels in the system");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post youtube links")]
        [NUnit.Framework.TestCaseAttribute("http://www.youtube.com/watch?feature=player_embedded&v=o-50GjySwew#!", new string[0])]
        [NUnit.Framework.TestCaseAttribute("http://www.youtube.com/watch?feature=player_embedded&v=o-50GjySwew", new string[0])]
        public virtual void PostYoutubeLinks(string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post youtube links", exampleTags);
#line 59
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 60
 testRunner.When(string.Format("I add the message \"{0}\" from user \'Testuser\'", message));
#line 61
 testRunner.Then("the message should be displayed as an inline youtube video");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Emoticons")]
        [NUnit.Framework.TestCaseAttribute("That\'s good :-)", ":-)", new string[0])]
        [NUnit.Framework.TestCaseAttribute("That\'s good :)", ":)", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Yay! :D", ":D", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Yay! :-D", ":-D", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Oh no... :-(", ":-(", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Oh no... :(", ":(", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Hmm... :-S", ":-S", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Hmm... :S", ":S", new string[0])]
        public virtual void Emoticons(string message, string emoticon, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Emoticons", exampleTags);
#line 67
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 68
 testRunner.When(string.Format("I add the message \"{0}\" from user \'Testuser\'", message));
#line 69
 testRunner.Then(string.Format("the message \'{0}\' should have the \'{1}\' replaced by a graphic", message, emoticon));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Custom highlighting")]
        [NUnit.Framework.TestCaseAttribute("arkbuilder", "Red", "Jeg tar arkbuilder!", "<Testuser> Jeg tar arkbuilder!", new string[0])]
        public virtual void CustomHighlighting(string triggerword, string color, string message, string expectedMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Custom highlighting", exampleTags);
#line 82
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 83
 testRunner.Given(string.Format("that there is a setting to render messages with the word \'{0}\' in \'{1}\'", triggerword, color));
#line 84
 testRunner.When(string.Format("I add the message \"{0}\" from user \'Testuser\'", message));
#line 85
 testRunner.Then(string.Format("the message \'{0}\' should be displayed rendered in \'{1}\'", expectedMessage, color));
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
