// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MetroFire.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Login")]
    public partial class LoginFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Login.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Login", "In order to get access to Campfire rooms\r\nAs a Campfire user\r\nI want to enter my " +
                    "account information", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid account name")]
        [NUnit.Framework.CategoryAttribute("backgroundtestscheduler")]
        public virtual void InvalidAccountName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid account name", new string[] {
                        "backgroundtestscheduler"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("that \'Fobsd\' is not a valid Campfire account name");
#line 9
 testRunner.When("I enter \'Fobsd\' for the account name on the login screen");
#line 10
 testRunner.And("I wait 3 seconds");
#line 11
 testRunner.Then("an account name error message should be displayed on the login screen");
#line 12
 testRunner.And("the account name should not be verified on the login screen");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid account name")]
        [NUnit.Framework.CategoryAttribute("backgroundtestscheduler")]
        public virtual void ValidAccountName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid account name", new string[] {
                        "backgroundtestscheduler"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("that \'Foobar\' is a valid Campfire account name");
#line 17
 testRunner.When("I enter \'Foobar\' for the account name on the login screen");
#line 18
 testRunner.And("I enter a token");
#line 19
 testRunner.And("I wait 3 seconds");
#line 20
 testRunner.Then("an error message should not be displayed on the login screen");
#line 21
 testRunner.And("the account name should be verified on the login screen");
#line 22
 testRunner.And("I should be able to log in");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Error message if Campfire cannot be reached")]
        [NUnit.Framework.CategoryAttribute("backgroundtestscheduler")]
        public virtual void ErrorMessageIfCampfireCannotBeReached()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error message if Campfire cannot be reached", new string[] {
                        "backgroundtestscheduler"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("that Campfire cannot be reached while verifying account name");
#line 28
 testRunner.When("I enter \'Foobar\' for the account name on the login screen");
#line 29
 testRunner.And("I wait 3 seconds");
#line 30
 testRunner.Then("a connection error message should be displayed on the login screen");
#line 31
 testRunner.And("an account name error message should be displayed on the login screen");
#line 32
 testRunner.And("the account name should not be verified on the login screen");
#line 33
 testRunner.And("I should not be able to log in");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Retry if Campfire initially cannot be reached")]
        [NUnit.Framework.CategoryAttribute("backgroundtestscheduler")]
        public virtual void RetryIfCampfireInitiallyCannotBeReached()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retry if Campfire initially cannot be reached", new string[] {
                        "backgroundtestscheduler"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("that Campfire cannot be reached while verifying account name");
#line 38
 testRunner.And("that \'Foobar\' is a valid Campfire account name");
#line 39
 testRunner.When("I enter \'Foobar\' for the account name on the login screen");
#line 40
 testRunner.And("I enter the token \'12345\' on the login screen");
#line 41
 testRunner.And("I wait 3 seconds");
#line 42
 testRunner.And("then Campfire can be reached while verifying account name");
#line 43
 testRunner.And("I click Retry on the login screen");
#line 44
 testRunner.And("I wait 3 seconds");
#line 45
 testRunner.Then("I should be able to log in");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Go to settings if network error")]
        [NUnit.Framework.CategoryAttribute("backgroundtestscheduler")]
        public virtual void GoToSettingsIfNetworkError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Go to settings if network error", new string[] {
                        "backgroundtestscheduler"});
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("that Campfire cannot be reached while verifying account name");
#line 51
 testRunner.When("I enter \'Foobar\' for the account name on the login screen");
#line 52
 testRunner.And("I enter a token");
#line 53
 testRunner.And("I wait 3 seconds");
#line 54
 testRunner.And("I click Proxy settings on the login screen");
#line 55
 testRunner.Then("Proxy Settings should be the active module");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid token")]
        [NUnit.Framework.CategoryAttribute("backgroundtestscheduler")]
        public virtual void InvalidToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid token", new string[] {
                        "backgroundtestscheduler"});
#line 58
this.ScenarioSetup(scenarioInfo);
#line 59
 testRunner.Given("that \'12345\' is an invalid token");
#line 60
 testRunner.And("that \'Foobar\' is a valid Campfire account name");
#line 61
 testRunner.When("I enter \'Foobar\' for the account name on the login screen");
#line 62
 testRunner.And("I enter the token \'12345\' on the login screen");
#line 63
 testRunner.And("I wait 3 seconds");
#line 64
 testRunner.And("I click Login");
#line 65
 testRunner.And("I wait 3 seconds");
#line 66
 testRunner.Then("the token should be marked as wrong on the login screen");
#line 67
 testRunner.And("it should not be logging in");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid token")]
        [NUnit.Framework.CategoryAttribute("backgroundtestscheduler")]
        public virtual void ValidToken()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid token", new string[] {
                        "backgroundtestscheduler"});
#line 71
this.ScenarioSetup(scenarioInfo);
#line 72
 testRunner.Given("that \'12345\' is a valid token");
#line 73
 testRunner.And("that \'Foobar\' is a valid Campfire account name");
#line 74
 testRunner.When("I enter \'Foobar\' for the account name on the login screen");
#line 75
 testRunner.And("I enter the token \'12345\' on the login screen");
#line 76
 testRunner.And("I wait 3 seconds");
#line 77
 testRunner.And("I click Login");
#line 78
 testRunner.And("I wait 3 seconds");
#line 79
 testRunner.Then("the token should not be marked as wrong on the login screen");
#line 80
 testRunner.And("it should not be logging in");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
