// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MetroFire.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Notification settings")]
    public partial class NotificationSettingsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "NotificationSettings.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Notification settings", "In order to get notified of important events\r\nAs a Campfire user\r\nI want to edit " +
                    "notifications", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("that I am logged in");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Display notification settings")]
        public virtual void DisplayNotificationSettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Display notification settings", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 10
 testRunner.Given("a new notification");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "MatchText",
                        "MatchUser",
                        "MatchRoom"});
            table1.AddRow(new string[] {
                        "Room activity",
                        "Boink",
                        "",
                        ""});
#line 11
 testRunner.And("the notification has the following triggers:", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Action type",
                        "Value"});
            table2.AddRow(new string[] {
                        "Show toast",
                        ""});
#line 14
 testRunner.And("the notification has the following actions", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Line"});
            table3.AddRow(new string[] {
                        "When"});
            table3.AddRow(new string[] {
                        "there is any activity matching the text \'Boink\'"});
            table3.AddRow(new string[] {
                        "then"});
            table3.AddRow(new string[] {
                        "show a toast"});
#line 18
 testRunner.Then("the screen should read like this:", ((string)(null)), table3);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete notification")]
        public virtual void DeleteNotification()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete notification", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 26
 testRunner.Given("a new notification");
#line 27
 testRunner.When("I close notification #1");
#line 28
 testRunner.Then("there should be 0 notifications");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Edit trigger")]
        public virtual void EditTrigger()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit trigger", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 31
 testRunner.Given("a new notification");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "MatchText",
                        "MatchUser",
                        "MatchRoom"});
            table4.AddRow(new string[] {
                        "Room activity",
                        "Boink",
                        "",
                        ""});
#line 32
 testRunner.And("the notification has the following triggers:", ((string)(null)), table4);
#line 35
 testRunner.When("I double click on trigger #1");
#line 36
 testRunner.Then("trigger #1 should be editable");
#line 37
 testRunner.And("all triggers except #1 should not be editable");
#line 38
 testRunner.And("all actions should not be editable");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Editing one trigger should stop editing another")]
        public virtual void EditingOneTriggerShouldStopEditingAnother()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing one trigger should stop editing another", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 41
 testRunner.Given("a new notification");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "MatchText",
                        "MatchUser",
                        "MatchRoom"});
            table5.AddRow(new string[] {
                        "Room activity",
                        "Boink",
                        "",
                        ""});
            table5.AddRow(new string[] {
                        "Room activity",
                        "Moink",
                        "",
                        ""});
#line 42
 testRunner.And("the notification has the following triggers:", ((string)(null)), table5);
#line 46
 testRunner.When("I double click on trigger #1");
#line 47
 testRunner.And("I double click on trigger #2");
#line 48
 testRunner.Then("trigger #2 should be editable");
#line 49
 testRunner.And("all triggers except #2 should not be editable");
#line 50
 testRunner.And("all actions should not be editable");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
