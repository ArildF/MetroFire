// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MetroFire.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Notifications")]
    public partial class NotificationsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Notifications.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Notifications", "In order to be notified of important messages\r\nAs a chatter\r\nI want to get notifi" +
                    "cations about important messages", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("that I am logged in");
#line 8
 testRunner.And("a room called \"Test\"");
#line 9
 testRunner.And("a user \'Testuser\'");
#line 10
 testRunner.And("that I have joined the room \"Test\"");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Notify on message")]
        public virtual void NotifyOnMessage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Notify on message", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 13
 testRunner.Given("that my settings are set to flash taskbar on any message");
#line 14
 testRunner.When("the message \"Hello world\" is received from user \'Testuser\' for room \"Test\"");
#line 15
 testRunner.Then("the taskbar should flash");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Don\'t notify on message from self")]
        public virtual void DonTNotifyOnMessageFromSelf()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Don\'t notify on message from self", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 18
 testRunner.Given("that my settings are set to flash taskbar on any message");
#line 19
 testRunner.When("I send the message \"Hello world\" to room \"Test\"");
#line 20
 testRunner.Then("the taskbar should not flash");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Notify with toast")]
        [NUnit.Framework.CategoryAttribute("backgroundtestscheduler")]
        public virtual void NotifyWithToast()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Notify with toast", new string[] {
                        "backgroundtestscheduler"});
#line 23
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 24
 testRunner.Given("that my settings are set to show a toast on any message");
#line 25
 testRunner.When("the message \"Hello world\" is received from user \'Testuser\' for room \"Test\"");
#line 26
 testRunner.Then("a toast should appear containing the words \"<Testuser> Hello world\"");
#line 27
 testRunner.Then("after 8 seconds there should be 0 toasts");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Close toast manually")]
        public virtual void CloseToastManually()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Close toast manually", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 30
 testRunner.Given("that my settings are set to show a toast on any message");
#line 31
 testRunner.And("the message \"Hello world\" is received from user \'Testuser\' for room \"Test\"");
#line 32
 testRunner.When("I close the toast by clicking on the X");
#line 33
 testRunner.Then("there should be 0 toasts");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Click on toast to activate room")]
        public virtual void ClickOnToastToActivateRoom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Click on toast to activate room", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 36
 testRunner.Given("a room called \"Foo\"");
#line 37
 testRunner.And("that I have joined the room \"Foo\"");
#line 38
 testRunner.And("that my settings are set to show a toast on any message");
#line 39
 testRunner.And("the message \"Blah\" is received from user \'Testuser\' for room \"Test\"");
#line 40
 testRunner.When("I click on the toast");
#line 41
 testRunner.Then("room \"Test\" should be active");
#line 42
 testRunner.And("the application should be active");
#line 43
 testRunner.And("there should be 0 toasts");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
