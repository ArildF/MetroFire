//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleLobbyViewModel
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleLobbyViewModel { }
#else

	public class SampleLobbyViewModel : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public SampleLobbyViewModel()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/MetroFire;component/SampleData/SampleLobbyViewModel/SampleLobbyViewModel.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private Rooms _Rooms = new Rooms();

		public Rooms Rooms
		{
			get
			{
				return this._Rooms;
			}
		}

		private string _AccountName = string.Empty;

		public string AccountName
		{
			get
			{
				return this._AccountName;
			}

			set
			{
				if (this._AccountName != value)
				{
					this._AccountName = value;
					this.OnPropertyChanged("AccountName");
				}
			}
		}

		private string _AccountSubdomain = string.Empty;

		public string AccountSubdomain
		{
			get
			{
				return this._AccountSubdomain;
			}

			set
			{
				if (this._AccountSubdomain != value)
				{
					this._AccountSubdomain = value;
					this.OnPropertyChanged("AccountSubdomain");
				}
			}
		}

		private string _AccountPlan = string.Empty;

		public string AccountPlan
		{
			get
			{
				return this._AccountPlan;
			}

			set
			{
				if (this._AccountPlan != value)
				{
					this._AccountPlan = value;
					this.OnPropertyChanged("AccountPlan");
				}
			}
		}

		private string _AccountStorage = string.Empty;

		public string AccountStorage
		{
			get
			{
				return this._AccountStorage;
			}

			set
			{
				if (this._AccountStorage != value)
				{
					this._AccountStorage = value;
					this.OnPropertyChanged("AccountStorage");
				}
			}
		}
	}

	public class Rooms : System.Collections.ObjectModel.ObservableCollection<RoomsItem>
	{ 
	}

	public class RoomsItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _Topic = string.Empty;

		public string Topic
		{
			get
			{
				return this._Topic;
			}

			set
			{
				if (this._Topic != value)
				{
					this._Topic = value;
					this.OnPropertyChanged("Topic");
				}
			}
		}

		private bool _IsActive = false;

		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}

			set
			{
				if (this._IsActive != value)
				{
					this._IsActive = value;
					this.OnPropertyChanged("IsActive");
				}
			}
		}

		private string _Notifications = string.Empty;

		public string Notifications
		{
			get
			{
				return this._Notifications;
			}

			set
			{
				if (this._Notifications != value)
				{
					this._Notifications = value;
					this.OnPropertyChanged("Notifications");
				}
			}
		}
	}
#endif
}
