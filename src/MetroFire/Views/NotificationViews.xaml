<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:Settings="clr-namespace:Rogue.MetroFire.UI.ViewModels.Settings" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:Infrastructure="clr-namespace:Rogue.MetroFire.UI.Infrastructure"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:Behaviors="clr-namespace:Rogue.MetroFire.UI.Behaviors" mc:Ignorable="d">

	<Infrastructure:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
	
	<DataTemplate x:Key="_triggerActionItemTemplate">


		<StackPanel Background="Transparent">
			<Infrastructure:InputBehavior.CustomKeyBindings>
				<Infrastructure:CustomKeyBindingsCollection>
					<Infrastructure:CustomKeyBinding Key="Enter"
													Command="{Binding DataContext.ToggleEditCommand, RelativeSource={RelativeSource FindAncestor, AncestorLevel=2, AncestorType={x:Type ListBox}}, PresentationTraceSources.TraceLevel=High}"/>
					<!--CommandParameter="{Binding}"/>-->
				</Infrastructure:CustomKeyBindingsCollection>
			</Infrastructure:InputBehavior.CustomKeyBindings>

			<i:Interaction.Triggers>
				<i:EventTrigger EventName="MouseDoubleClick" 
								SourceObject="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}">
					<i:InvokeCommandAction 
						Command="{Binding DataContext.ToggleEditCommand, RelativeSource={RelativeSource FindAncestor, AncestorLevel=2, AncestorType={x:Type ListBox}}}" 
						CommandParameter="{Binding}"/>
				</i:EventTrigger>
			</i:Interaction.Triggers>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="Visibility">
					<VisualState x:Name="NotEditing">
						<Storyboard>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="contentPresenter">
								<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
							</ObjectAnimationUsingKeyFrames>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="grid">
								<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Editing">
						<Storyboard>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="grid">
								<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>

							</ObjectAnimationUsingKeyFrames>
							<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="contentPresenter">
								<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<Grid x:Name="grid">
				<TextBlock Margin="0,0,0,4.04" TextWrapping="Wrap" d:LayoutOverrides="Width, Height" Style="{DynamicResource MetroMediumLightHeader}">
						<Run Text="{Binding DisplayText, Mode=OneWay, StringFormat=&#x2022;  {0}}"/>
				</TextBlock>
			</Grid>
			<ContentPresenter x:Name="contentPresenter" Content="{Binding}" Visibility="Collapsed"/>
			<i:Interaction.Behaviors>
				<Behaviors:VisualStateBehavior>
					<Behaviors:Transition Source="{Binding IsEditing}" Value="False" VisualState="NotEditing"/>
					<Behaviors:Transition Source="{Binding IsEditing}" Value="True" VisualState="Editing"/>
				</Behaviors:VisualStateBehavior>
			</i:Interaction.Behaviors>
		</StackPanel>
	</DataTemplate>
			
	
	<DataTemplate x:Key="_notificationsItemTemplate">
		<Border BorderBrush="Black" BorderThickness="0,0,0,1" Height="Auto" Width="Auto">
			<Grid>
				<StackPanel Height="Auto" Width="Auto" Background="White" d:LayoutOverrides="Width, Height" Margin="0,0,0,0"
							>
					<TextBlock TextWrapping="Wrap" Style="{DynamicResource MetroMediumLightHeader}">
						<Run>When</Run>
						<Hyperlink Command="{Binding AddNewTriggerCommand}" FontSize="10">(Add)</Hyperlink>
					</TextBlock>
					<ListBox Height="Auto" Margin="10,0,0,0" ItemsSource="{Binding Triggers}" ItemTemplate="{DynamicResource _triggerActionItemTemplate}"
						Style="{DynamicResource _plainListBoxStyle}">
						
					</ListBox>
					<TextBlock TextWrapping="Wrap" Style="{DynamicResource MetroMediumLightHeader}">
						<Run>then</Run>
						<Hyperlink Command="{Binding AddNewActionCommand}" FontSize="10">(Add)</Hyperlink>
					</TextBlock>
					<ListBox Height="Auto" Margin="10,0,0,0" Style="{DynamicResource _plainListBoxStyle}" ItemsSource="{Binding Actions}" ItemTemplate="{DynamicResource _triggerActionItemTemplate}"/>
				</StackPanel>
				
				<Button x:Name="button" 
						Command="{Binding DataContext.DeleteNotificationCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}"
						CommandParameter="{Binding}"
						Template="{DynamicResource CloseButtonTemplate}" Visibility="Hidden" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,1,7,0"/>

			</Grid>
		</Border>
		<DataTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Visibility" TargetName="button" Value="Visible"/>
			</Trigger>
		</DataTemplate.Triggers>
		
	</DataTemplate>

	<DataTemplate DataType="{x:Type Settings:PlaySoundViewModel}">
		<Grid d:DesignWidth="275.183" d:DesignHeight="25.92">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="0.302*"/>
				<ColumnDefinition Width="0.548*"/>
				<ColumnDefinition Width="0.15*"/>
			</Grid.ColumnDefinitions>
			<Label Content="Sound file" d:LayoutOverrides="Height, GridBox" Grid.ColumnSpan="1" HorizontalAlignment="Left"/>
			<TextBox TextWrapping="Wrap" Text="{Binding Path=SoundFile}" d:LayoutOverrides="Width, GridBox" Grid.Column="1" Grid.ColumnSpan="1" Height="Auto"/>
			<Button Content="..." d:LayoutOverrides="Height" Grid.Column="2" Style="{DynamicResource MetroBigButton}" Margin="2" FontSize="13.333"/>
		</Grid>
		
	</DataTemplate>

		<DataTemplate DataType="{x:Type Settings:ActionViewModel}">
		<Grid d:DesignWidth="422" d:DesignHeight="93.96">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="0.656*"/>
				<ColumnDefinition Width="0.163*"/>
				<ColumnDefinition Width="Auto"/>
			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition/>
				<RowDefinition Height="Auto"/>
				<RowDefinition/>
				<RowDefinition/>
			</Grid.RowDefinitions>
			<ComboBox d:LayoutOverrides="Height" DisplayMemberPath="Text" ItemsSource="{Binding ActionTypes}" SelectedItem="{Binding SelectedActionType}" Grid.ColumnSpan="3"/>
			<ComboBox HorizontalAlignment="Stretch" Margin="0" Width="Auto" d:LayoutOverrides="Height, GridBox" Grid.Row="2"
					  DisplayMemberPath="Text"
					  ItemsSource="{Binding ActionConditions}" SelectedItem="{Binding SelectedActionCondition}"/>
			
			<ContentControl Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="3" Content="{Binding SubViewModel}" 
							HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
			<TextBox Height="Auto" TextWrapping="Wrap"  Width="Auto" Margin="19,0,20,0" Grid.RowSpan="1" 
					 Text="{Binding Interval}"
					 Visibility="{Binding ShowInterval, Converter={StaticResource BoolToVisibilityConverter}}"
					 Grid.Row="2" Grid.Column="1"/>
			<TextBlock HorizontalAlignment="Center" TextWrapping="Wrap" VerticalAlignment="Center" 
					   Visibility="{Binding ShowInterval, Converter={StaticResource BoolToVisibilityConverter}}"
					   Grid.Row="2" Grid.Column="2" Margin="13,0,12,0"><Run Language="nb-no" Text="{Binding IntervalText}"/></TextBlock>
			<Button x:Name="button" Content="X" d:LayoutOverrides="Height" Grid.Column="2" Visibility="Hidden" 
					Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=ListBox}, Path=DataContext.DeleteActionCommand}"
					CommandParameter="{Binding}"
					HorizontalAlignment="Right" VerticalAlignment="Top" Grid.Row="3"/>
		</Grid>

		<DataTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Visibility" TargetName="button" Value="Visible"/>
			</Trigger>
		</DataTemplate.Triggers>
	</DataTemplate>
	
	<DataTemplate DataType="{x:Type Settings:NotificationSettingsViewModel}">
		<ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalContentAlignment="Stretch">
			<StackPanel Height="Auto" Width="Auto"
						d:DataContext="{Binding Source={StaticResource SampleNotificationSettingsViewModel}}" HorizontalAlignment="Stretch">
				<TextBlock TextWrapping="Wrap" Text="Notifications" Width="Auto" Style="{DynamicResource SmallMetroHeading}">
					
				</TextBlock>
				<ListBox Height="Auto" ItemsSource="{Binding Notifications}" ItemTemplate="{DynamicResource _notificationsItemTemplate}"
						 
					 Style="{DynamicResource _plainListBoxStyle}"/>
				<Button Content="Add notification" Width="Auto" Style="{DynamicResource MetroBigButton}" Command="{Binding AddNotificationCommand}"/>
		
			</StackPanel>
		</ScrollViewer>

	</DataTemplate>
	 <Style x:Key="_invokableListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="Padding" Value="0,0,0,0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Border x:Name="Bd" SnapsToDevicePixels="true" Background="Transparent">
						

						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="true">
							<!--<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>-->
							<Setter Property="Background" Value="LightGray" TargetName="Bd"/>
							<!--<Setter Property="BorderThickness" Value="0.5" TargetName="Bd"/>-->
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="Selector.IsSelectionActive" Value="false"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="Bd" Value="{x:Null}"/>
						</MultiTrigger>
						<!--<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

	

			<!--<Setter Property="Background" Value="Transparent"/>
	 	<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
	 	<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
	 	<Setter Property="Padding" Value="2,0,0,0"/>-->
	 	<!--<Setter Property="Template">
	 		<Setter.Value>
	 			<ControlTemplate TargetType="{x:Type ListBoxItem}">
	 				<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
	 			</ControlTemplate>
	 		</Setter.Value>
	 	</Setter>-->
		
		
	  </Style>
	
	  <Style x:Key="_plainListBoxStyle" TargetType="{x:Type ListBox}">
	  	<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="ItemContainerStyle" Value="{DynamicResource _invokableListBoxItemStyle}"/>
	  	<Setter Property="HorizontalContentAlignment" Value="Stretch"/>	
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<StackPanel></StackPanel>
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>

	</Style>
	<DataTemplate DataType="{x:Type Settings:TriggerViewModel}">
		<Grid Margin="0" Height="Auto">
	
			<Grid VerticalAlignment="Stretch" d:DesignWidth="504.733" d:DesignHeight="112.88" Background="White" d:LayoutOverrides="Width, Height">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto"/>
					<RowDefinition Height="Auto"/>
					<RowDefinition Height="Auto"/>
					<RowDefinition Height="Auto"/>
					<RowDefinition Height="Auto"/>
				</Grid.RowDefinitions>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="2*"/>
					<ColumnDefinition Width="5*"/>
				</Grid.ColumnDefinitions>
				<TextBlock TextWrapping="Wrap" d:LayoutOverrides="Width" Grid.ColumnSpan="2" VerticalAlignment="Center"><Run Text="When"/></TextBlock>
				<ComboBox Width="Auto" d:LayoutOverrides="Height, GridBox" Grid.ColumnSpan="1" Grid.Column="1" 
					HorizontalAlignment="Stretch" ItemsSource="{Binding TriggerTypes}" 
					SelectedItem="{Binding SelectedTriggerType}"
					DisplayMemberPath="Text" Margin="0,0,0,6" HorizontalContentAlignment="Stretch"/>
				<CheckBox x:Name="checkBox" Content="Matching" Margin="6,0,-0.001,0" d:LayoutOverrides="Width" Grid.Row="1" 
					IsChecked="{Binding DoMatchText}"
					VerticalAlignment="Center"/>
				<TextBox TextWrapping="Wrap" d:LayoutOverrides="Width" Grid.Row="1" 
					Text="{Binding MatchText}"
					Grid.Column="1" IsEnabled="{Binding IsChecked, ElementName=checkBox}" VerticalAlignment="Top" Margin="0,0,0,6" ToolTip="Enter a regular expression to match room text"/>
				<CheckBox x:Name="checkBox1" Content="In room matching" Margin="6,0,5.999,0" d:LayoutOverrides="Width" 
					IsChecked="{Binding DoMatchRoom}"
					Grid.Row="2" VerticalAlignment="Center"/>
				<TextBox HorizontalAlignment="Stretch" TextWrapping="Wrap" d:LayoutOverrides="Height, GridBox" 
					Text="{Binding MatchRoom}"
					Grid.Row="2" Grid.Column="1" IsEnabled="{Binding IsChecked, ElementName=checkBox1}" Margin="0,0,0,6" HorizontalContentAlignment="Stretch" ToolTip="Enter a regular expression to match the room title"/>
				<CheckBox x:Name="checkBox1_Copy" Content="User matching" Margin="6,0,5.998,0" 
					IsChecked="{Binding DoMatchUser}"
					Grid.Row="3" VerticalAlignment="Center" d:LayoutOverrides="Width"/>
				<TextBox HorizontalAlignment="Stretch" TextWrapping="Wrap" 
					Text="{Binding MatchUser}"
					Grid.Row="3" Grid.Column="1" IsEnabled="{Binding IsChecked, ElementName=checkBox1_Copy}" Margin="0,0,0,6" HorizontalContentAlignment="Stretch" d:LayoutOverrides="Height, GridBox" ToolTip="Enter a regular expression to match the user name"/>
				<Button x:Name="button" Content="X" d:LayoutOverrides="Height" Grid.Column="2" Visibility="Hidden" 
					Command="{Binding DataContext.DeleteTriggerCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBox}}}"
					CommandParameter="{Binding}"
					HorizontalAlignment="Right" VerticalAlignment="Top" Grid.Row="4"/>
			</Grid>
		</Grid>
		<DataTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Visibility" TargetName="button" Value="Visible"/>
			</Trigger>
		</DataTemplate.Triggers>
	</DataTemplate>
</ResourceDictionary>